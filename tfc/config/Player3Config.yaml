#
# Copyright 2019 Stefan Prisca
#
# The file is a copy of the Hyperledger e2e configuration found at
# < https://github.com/hyperledger/fabric-sdk-go/blob/master/test/fixtures/config/config_e2e.yaml >

version: 0.0.0

client:
  organization: player3

  logging:
    level: info
  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: ${SCFIXTURES}/tfc/crypto-config/

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/state-store3"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp3

  # [Optional] BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player3.tfc.com/users/User1@player3.tfc.com/tls/client.key
      cert:
        path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player3.tfc.com/users/User1@player3.tfc.com/tls/client.crt

#
# list of participating organizations in this network
#
organizations:
  Player1:
    mspid: Player1MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/player1.tfc.com/users/{username}@player1.tfc.com/msp

    peers:
      - peer0.player1.tfc.com

  Player2:
    mspid: Player2MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/player2.tfc.com/users/{username}@player2.tfc.com/msp

    peers:
      - peer0.player2.tfc.com
  
  Player3:
    mspid: Player3MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/player3.tfc.com/users/{username}@player3.tfc.com/msp

    peers:
      - peer0.player3.tfc.com

  Player4:
    mspid: Player4MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/player4.tfc.com/users/{username}@player4.tfc.com/msp

    peers:
      - peer0.player4.tfc.com

  Player5:
    mspid: Player5MSP

    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  peerOrganizations/player5.tfc.com/users/{username}@player5.tfc.com/msp

    peers:
      - peer0.player5.tfc.com

  # Orderer Org name
  Orderer:
      # Membership Service Provider ID for this organization
      mspID: OrdererMSP

      # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
      cryptoPath: ordererOrganizations/tfc.com/users/{username}@tfc.com/msp


#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.tfc.com:
    # [Optional] Default: Infer from hostname
    url: orderer.tfc.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${SCFIXTURES}/tfc/crypto-config/ordererOrganizations/tfc.com/tlsca/tlsca.tfc.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.player1.tfc.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: peer0.player1.tfc.com:7051

    grpcOptions:
      ssl-target-name-override: peer0.player1.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player1.tfc.com/tlsca/tlsca.player1.tfc.com-cert.pem

  peer0.player2.tfc.com:
    url: peer0.player2.tfc.com:8051
    grpcOptions:
      ssl-target-name-override: peer0.player2.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player2.tfc.com/tlsca/tlsca.player2.tfc.com-cert.pem

  peer0.player3.tfc.com:
    url: peer0.player3.tfc.com:9051
    grpcOptions:
      ssl-target-name-override: peer0.player3.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player3.tfc.com/tlsca/tlsca.player3.tfc.com-cert.pem

  peer0.player4.tfc.com:
    url: peer0.player4.tfc.com:10051
    grpcOptions:
      ssl-target-name-override: peer0.player4.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player4.tfc.com/tlsca/tlsca.player4.tfc.com-cert.pem

  peer0.player5.tfc.com:
    url: peer0.player5.tfc.com:11051
    grpcOptions:
      ssl-target-name-override: peer0.player5.tfc.com
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      path: ${SCFIXTURES}/tfc/crypto-config/peerOrganizations/player5.tfc.com/tlsca/tlsca.player5.tfc.com-cert.pem


entityMatchers:
  peer:
    # the below matcher will allow dynamic discovery to use the anchor peer (peer0.org1.example.com)
    # as a template for all org1 discovered peers config
    - pattern: (\w*)peer0.player1.tfc.com(\w*)
      urlSubstitutionExp: localhost:7051
      sslTargetOverrideUrlSubstitutionExp: peer0.player1.tfc.com
      mappedHost: peer0.player1.tfc.com

    - pattern: (\w*)peer0.player2.tfc.com(\w*)
      urlSubstitutionExp: localhost:8051
      sslTargetOverrideUrlSubstitutionExp: peer0.player2.tfc.com
      mappedHost: peer0.player2.tfc.com
    
    - pattern: (\w*)peer0.player3.tfc.com(\w*)
      urlSubstitutionExp: localhost:9051
      sslTargetOverrideUrlSubstitutionExp: peer0.player3.tfc.com
      mappedHost: peer0.player3.tfc.com

    - pattern: (\w*)peer0.player4.tfc.com(\w*)
      urlSubstitutionExp: localhost:10051
      sslTargetOverrideUrlSubstitutionExp: peer0.player4.tfc.com
      mappedHost: peer0.player4.tfc.com

    - pattern: (\w*)peer0.player5.tfc.com(\w*)
      urlSubstitutionExp: localhost:11051
      sslTargetOverrideUrlSubstitutionExp: peer0.player5.tfc.com
      mappedHost: peer0.player5.tfc.com
  orderer:
    - pattern: (\w*)orderer.tfc.com(\w*)
      urlSubstitutionExp: localhost:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.tfc.com
      mappedHost: orderer.tfc.com


#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:

  # Default channel is used if channel configuration is missing or if defined channel configuration is missing info
  # If channel doesn't define peers then peers from default channel will be used
  # If channel doesn't define orderes then orderes from default channel will be used
  # If channel doesn't define policies then policies from default channel will be used.
  # Also, if channel defines policies and some policy info is missing than that missing info will be filled from default channel.
  _default:

    # [Optional]. list of peers from participating orgs
    peers:
      peer0.player1.tfc.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      # peer0.player2.tfc.com:
      #   # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
      #   # have the chaincode installed. The app can also use this property to decide which peers
      #   # to send the chaincode install request. Default: true
      #   endorsingPeer: true

      #   # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
      #   # installed. The app can also use this property to decide which peers to send the
      #   # chaincode install request. Default: true
      #   chaincodeQuery: true

      #   # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
      #   # queryBlock(), queryTransaction(), etc. Default: true
      #   ledgerQuery: true

      #   # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
      #   # produce events but the app typically only needs to connect to one to listen to events.
      #   # Default: true
      #   eventSource: true

      # peer0.player3.tfc.com:
      #   # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
      #   # have the chaincode installed. The app can also use this property to decide which peers
      #   # to send the chaincode install request. Default: true
      #   endorsingPeer: true

      #   # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
      #   # installed. The app can also use this property to decide which peers to send the
      #   # chaincode install request. Default: true
      #   chaincodeQuery: true

      #   # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
      #   # queryBlock(), queryTransaction(), etc. Default: true
      #   ledgerQuery: true

      #   # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
      #   # produce events but the app typically only needs to connect to one to listen to events.
      #   # Default: true
      #   eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving discovery info
      discovery:
        #[Optional] discovery info will be retrieved for these number of random targets
        maxTargets: 2
        #[Optional] retry options for retriving discovery info
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 4
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0
      #[Optional] options for selection service
      selection:
        #[Optional] endorser selection sorting strategy. Possible values: [BlockHeightPriority,Balanced]
        SortingStrategy: BlockHeightPriority
        #[Optional] load-balancer type. Possible values: [RoundRobin,Random]
        Balancer: RoundRobin
        #[Optional] the number of blocks from the highest block number of a group of peers that a peer
        #can lag behind and still be considered to be up-to-date. These peers will be sorted using the
        #given Balancer. If a peer's block height falls behind this threshold then it will be demoted
        #to a lower priority list of peers which will be sorted according to block height.
        #Note: This property only applies to BlockHeightPriority sorter.
        BlockHeightLagThreshold: 5
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

      #[Optional] options for the event service
      eventService:
        # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer
        # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]
        #
        # PreferOrg:
        #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the
        #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org
        #   are suitable then a peer from another org is chosen.
        # MinBlockHeight:
        #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is
        #   determined and the peers whose block heights are under the maximum height but above a provided "lag" threshold are load
        #   balanced. The other peers are not considered.
        # Balanced:
        #   Chooses peers using the configured balancer.
        resolverStrategy: PreferOrg

        # [Optional] balancer is the balancer to use when choosing a peer to connect to
        # Possible values: [Random (default), RoundRobin]
        balancer: RoundRobin

        # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer
        # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of
        # blocks then it will be excluded from selection.
        # Note that this parameter is applicable only when minBlockHeightResolverMode is set to ResolveByThreshold.
        # Default: 5
        blockHeightLagThreshold: 2

        # [Optional] reconnectBlockHeightLagThreshold - the event client will disconnect from the peer if the peer's
        # block height falls behind the specified number of blocks and will reconnect to a better performing peer.
        # Note that this parameter is only applicable if peerMonitor is set to Enabled (default).
        # Default: 10
        # NOTES:
        #   - Setting this value too low may cause the event client to disconnect/reconnect too frequently, thereby
        #     affecting performance.
        reconnectBlockHeightLagThreshold: 5

        # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if
        # the event client should disconnect from it and reconnect to another peer.
        # Default: 0 (disabled) for Balanced resolverStrategy; 5s for PreferOrg and MinBlockHeight strategy
        peerMonitorPeriod: 3s
